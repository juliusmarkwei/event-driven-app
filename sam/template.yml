AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, prod]
    Default: dev
  EmailAddresses:
    Type: CommaDelimitedList
    Description: List of email addresses to subscribe to SNS (comma-separated)

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10

Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
    DependsOn: S3TriggerPermission  # Ensure permission is set before bucket notification
    Properties:
      BucketName: !Sub "upload-mybucket-${Environment}-${AWS::AccountId}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt NotifyFunction.Arn

  NotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: ../dist
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic

  S3TriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NotifyFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt UploadBucket.Arn

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "upload-notification-${Environment}"

  EmailSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: NotificationTopic
    Properties:
      Protocol: email
      TopicArn: !Ref NotificationTopic
      Endpoint: !Select [0, !Ref EmailAddresses]

Outputs:
  BucketName:
    Value: !Ref UploadBucket
  TopicArn:
    Value: !Ref NotificationTopic
  FunctionName:
    Value: !Ref NotifyFunction
